name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes

  combined-tests:
    name: Combined Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: file:./combined.db

      - name: Run combined tests
        run: npm run test:combined
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes
          DATABASE_URL: file:./combined.db

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: file:./test.db

      - name: Run API tests
        run: npm run test:api
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes
          DATABASE_URL: file:./test.db

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: file:./integration.db

      - name: Run integration tests
        run: npm run test:integration
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes
          DATABASE_URL: file:./integration.db

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, combined-tests, api-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push
          npm run db:seed
        env:
          DATABASE_URL: file:./e2e.db

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes
          DATABASE_URL: file:./e2e.db

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [combined-tests, api-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: file:./coverage.db

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION: yes
          DATABASE_URL: file:./coverage.db

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Coverage thresholds:" >> $GITHUB_STEP_SUMMARY
          echo "- Statements: 90%" >> $GITHUB_STEP_SUMMARY
          echo "- Branches: 85%" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: 90%" >> $GITHUB_STEP_SUMMARY
          echo "- Lines: 90%" >> $GITHUB_STEP_SUMMARY